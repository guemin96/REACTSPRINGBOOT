*스프링부트로 Restful 웹 서비스 만들기
-> 웹 서비스 : 인터넷을 통해 HTTP 프로토콜로 통신하는 애플리케이션이다.

Rest(representational State Transfer)
1. 상태 비저장 : 서버는 클라이언트 상태에 관한 어떤 정보도 저장하지 않는다.
2. 클라이언트-서버의 역할 구분 : 클라이언트와 서버는 독립적으로 작동한다. 서버는 클라이언트의 요청 없이는 어떤 정보도 보내지 않는다.
3. 캐시 가능 : 웹 서비스는 이용하는 여러 클라이언트가 같은 리소스를 요청할 때가 많다. 따라서 응답을 캐시하는 기능이 있으면 성능 향상에 유리하다.
4. 균일한 인터페이스 : 클라이언트는 달라도 보내는 요청은 비슷해야 한다. 클라이언트의 예로는 브라우저, 자바 애플리케이션, 모바일 애플리케이션이 있다.
5. 계층형 시스템 : REST는 계층형 시스템 아키텍처를 이용할 수 있게 해준다.
6. 주문형 코드 : 이는 선택적인 제약 조건이다.

****

URI(uniform Resource Identifier) => 통합 자원 식별자(인터넷상의 리소스 '자원 자체'를 식별하는 고유한 문자열 시퀀스)
URL(uniform Resource Locator) 	 => 자원 식별자와 위치를 동시에 보여줌(웹 사이트 주소 + 컴퓨터 네트워크 상의 자원)

****

균일한 인터페이스는 중요한 제약 조건이며 모든 REST 아키텍처가 다음 욧를 가져야 한다는 뜻이다.

1. 리소스 ID : 고유 식별자를 가진 리소스가 있다.(예: 웹 기반 REST 서비스의 URI). REST 리소스는 이해하기 쉬운 디렉터리 구조 URI를 노출해야한다. 따라서 체계적인 리소스 명명 전략이 아주 중요하다.
2. 표현을 통한 리소스 조작 : 리소스를 요청할 때 서버는 리소스의 표현으로 응답한다. 일반적인 표현 형식으로 JSON이나 XML이 있다.
3. 자체 설명적인 메시지 : 메시지에는 서버가 처리하는 방법을 알 수 있을 만큼 충분한 정보가 있어야 한다.
4. HATEOAS (hypermedia as the Engine of Application State) : 응답은 서비스의 다른 영역에 대한 링크를 포함할 수 있다.



*스프링 데이터 REST 이용하기

spring.data.rest.basePath=/api => localhost:8080/api 엔드포인트에서 RESTful 웹 서비스에 접근할 수 있다. 서비스의 루트 엔드 포인트를 호출하면 제공되는 리소스가 반환된다.


HTTP 방식		|	CRUD
GET			|	읽기(Read)
POST		|	생성(Create)
PUT/PATCH	|	업데이트(Update)
DELETE		|	삭제(delete)




엔티티를 업데이트하려면 PATCH 방식가 업데이트하려는 자동차의 링크(http://localhost:8080/api/cars/{id})를 이용한다. 
헤더에는 값이 application/json인 Content-Type 필드가 있어야 하며, 데이터가 편집된 car 객체를 요청 본문에 지정한다.
- PATCH 요청을 수행하려면 업데이트된 필드만 보내야 한다. 
- PUT 요청을 수행하려면 요청 본문에 모든 필드를 포함해야한다.


###### 포스트맨에서 text/uri-list 설정이 안됨 -> 72쪽
그래서 6번 car 데이터에 owner컬럼 값 못넣음


CarRepository에서 만들었던 함수를 불러오기 위해서는 url 엔드포인트에 search를 넣어주고 함수명과 파라미터를 넣어준다.
ex) http://localhost:8080/api/cars/search/findByBrand?brand=Ford




*백엔드 보호 및 테스트
스프링 시큐리티의 이해 : 자바 기반 웹 애플리케이션을 위한 보안 서비스를 제공함.

pom.xml에 아래 코드 넣게 되면 자동으로 스프링시큐리티 기능을 사용할 수 있게 됨
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-test</artifactId>
	<scope>test</scope>
</dependency>

http://localhost:8080/api에 접속하게 되면 스프링 시큐리티의 기본 로그인 페이지로 리디렉션된다.

스프링 시큐리티가 작동하는 방법을 구성하려면 WebSecurityConfigurerAdapter를 확장하는 새 구성 클래스를 추가해야 한다. 
애플리케이션 루트 패키지(com.packt.cardatabase)에 SecurityConfig라는 새 클래스를 만든다
@Configuration 및 @EnableWebSecurity 어노테이션으로 이 클래스에서 기본 웹 보안 구성을 비활성화하고 자체 구성을 정의할 수 있다.
configure(HttpSecurity http)메서드를 통해 애플리케이션의 보호되는 엔드포인트와 보호되지 않는 엔드포인트를 정의할 수 있다.


@Configuration
@EnableWebSecurity
public class SecurityConfig  extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
	}
	@Bean
	@Override
	public UserDetailsService userDetailsService() {
		UserDetails user = 
				User.withDefaultPasswordEncoder()
				.username("user")
				.password("password")
				.roles("USER")
				.build();
		return new InMemoryUserDetailsManager(user);
	}
	
}

위 방법을 사용하면 인메모리 사용자를 애플리케이션에 추가할 수 있다.(사용자 이름 : user, 암호 : password)


하지만 실제 애플리케이션에서는 사용자를 데이터베이스에 저장함
-> 	사용자 엔티티 클래스와 리포지터리를 작성해야함
	암호는 일반 텍스트 형식이 아닌 해싱 알고리즘을 사용해서 저장한다.
	

User 클래스와 UserRepository 클래스 생성후 스프링 시큐리티의 사용자 인증과 권한 부여에 이용되는 UserDetailsService 인터페이스 클래스를 만든다.
------------------------------------------------------------------------------------------------------------------
스프링 시큐리티가 인증을 처리할 때 데이터베이스에서 사용자를 검색하는 데 필요한 UserRepository 클래스를 UserDetailsServiceImpl 클래스에 주입

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
	
	@Autowired
	private UserRepository repository;

	@Override
	public UserDetails loadUserByUsername(String username) 
			throws UsernameNotFoundException {
		
		Optional<User> user = repository.findByUsername(username); 
		//DB에 접근하여 아이디와 비밀번호를 확인하고 가져옴
		UserBuilder builder = null;
		if(user.isPresent()) {	//user라는 객체에 값이 존재하는지 안하는지 체크해줌
			
			User currentUser = user.get();
			builder = 
					org.springframework.security.core.userdetails
					.User.withUsername(username);
			builder.password(currentUser.getPassword());
			builder.roles(currentUser.getRole());
		}else {
			//user 객체에 값이 업으면 not found 에러 발생
			throw new UsernameNotFoundException("User not found.");
		}
		return builder.build();
	}	
}


----------------------------------------------------------------------------------------------------------------------

그리고 사용자 정보가 DB에 저장되어있기 때문에 인메모리 사용자를 확인하기 위한 코드는 삭제하도록 함
아래 코드 삭제
@Bean
@Override
public UserDetailsService userDetailsService() {
	UserDetails user = 
			User.withDefaultPasswordEncoder()
			.username("user")
			.password("password")
			.roles("USER")
			.build();
	return new InMemoryUserDetailsManager(user);
}
----------------------------------------------------------------------------------------------------------------------

DB 사용자를 활성화하기 위해 configureGlobal 메서드를 추가함
그리고 암호의 경우 해싱알고리즘을 사용해야함으로 configureGlobal 메서드에 해싱 알고리즘을 정의해준다.

@Configuration
@EnableWebSecurity
public class SecurityConfig  extends WebSecurityConfigurerAdapter {
	
	@Autowired
	private UserDetailsServiceImpl userDetailsService;
	
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{
		auth.userDetailsService(userDetailsService)
			.passwordEncoder(new BCryptPasswordEncoder());
	}
}

현재 내 코드의 경우 WebSecurityConfigurerAdapter 상속받는 과정에서 The type WebSecurityConfigurerAdapter is deprecated라는 오류가 발생한다.
버전의 문제이므로 

<modelVersion>4.0.0</modelVersion>
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>2.6.12</version>
	<relativePath/> <!-- lookup parent from repository -->
</parent>

이 코드에서 버전을 2.6.12로 맞춰준다.



*JWT로 백엔드 보호

스프링 시큐리티를 사용하면 RESTful 웹 서비스를 사용할 때 기본 인증을 사용할 수 있는데 리액트로 프론트 엔드를 개발하게 되면 JWT 인증을 사용하여야 한다.
JWT => 크기가 아주 작기 때문에 UR., POST 매개변수 또는 헤더에 넣어서 전송할 수 있다.
xxxxx.yyyyy.zzzzz와 같이 마침표로 구분딘 세 부분으로 구성됨
1. xxxxx -> 토큰의 유형가 해싱 알고리즘을 정의하는 헤더
2. yyyyy -> 페이로드이며, 일반적으로 인증의 경우 사용자 정보를 포함함
3. zzzzz -> 토큰이 변조되지 않았음을 증명하기 위한 서명


POJO(Plain Olde Java Object) => 인증을 위한 자격 증명을 포함한 클래스



SecurityConfig -> 스프링 시큐리티가 작동하는 방법을 구성하는 클래스



현재 JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted. 
이 오류가 발생하였는데 어디서 잘못된건지 알수가 없음..
그래서 그냥 postman에서 새로운 request를 만들어서 진행했는데 잘됨
Postman에서 오류 발생시 post,get 방식 체크 꼭 하기, 그래도 안되면 add request
이렇게 하면 왠만한건 다 됨

---------------------------------------------------------------------------------------
CORS(Cross-Origin Resource Sharing) 필터 추가 -> 요청을 가로채고 해당 요청이 교차 출처에서 확인되면 적절한 헤더를 요청에 추가한다.